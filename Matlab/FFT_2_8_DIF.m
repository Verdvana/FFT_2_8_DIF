%------------------------------------------------------------------------------
%
%Module Name:					FFT_2_8_DIF.m
%Department:					Xidian University
%Function Description:	        基2的八点频率抽取FFT变化实现
%
%------------------------------------------------------------------------------
%
%Version 	Design		Coding		Simulata	  Review	Rel data
%V1.0		Verdvana	Verdvana                            2019-11-9
%
%-----------------------------------------------------------------------------------

clc;
clear all;
close all;

%旋转因子
w0 = 1 * 256;                     
w1 = (0.7071 - 0.7071*1i) * 256;
w2 = -1i * 256;
w3 = (-0.7071 - 0.7071*1i) * 256;

N = 8;
n = 0:1:N-1;

%八点抽取序列
x = [12,49,2,48,70,13,5,6];

%第一次蝶形变换
x1(1) = (x(1) + x(5)) * 256;
x1(2) = (x(2) + x(6)) * 256;
x1(3) = (x(3) + x(7)) * 256;
x1(4) = (x(4) + x(8)) * 256;

x2(1) = (x(1) - x(5))* w0;
x2(2) = (x(2) - x(6))* w1;
x2(3) = (x(3) - x(7))* w2;
x2(4) = (x(4) - x(8))* w3;

%第二次蝶形变换
x3(1) = (x1(1) + x1(3)) * 256;
x3(2) = (x1(2) + x1(4)) * 256;

x4(1) = (x1(1) - x1(3)) * w0;
x4(2) = (x1(2) - x1(4)) * w2;

x5(1) = (x2(1) + x2(3)) * 256;
x5(2) = (x2(2) + x2(4)) * 256;

x6(1) = (x2(1) - x2(3)) * w0;
x6(2) = (x2(2) - x2(4)) * w2;

%第三次蝶形变化

y(1) = (x3(1) + x3(2)) * 256;
y(5) = (x3(1) - x3(2)) * w0;
y(3) = (x4(1) + x4(2)) * 256;
y(7) = (x4(1) - x4(2)) * w0;
y(2) = (x5(1) + x5(2)) * 256;
y(6) = (x5(1) - x5(2)) * w0;
y(4) = (x6(1) + x6(2)) * 256;
y(8) = (x6(1) - x6(2)) * w0;

y(1) = y(1) / 256 / 256 / 256;
y(2) = y(2) / 256 / 256 / 256;
y(3) = y(3) / 256 / 256 / 256;
y(4) = y(4) / 256 / 256 / 256;
y(5) = y(5) / 256 / 256 / 256;
y(6) = y(6) / 256 / 256 / 256;
y(7) = y(7) / 256 / 256 / 256;
y(8) = y(8) / 256 / 256 / 256;



%结果输出
figure;
plot(x);
title('x');

figure;
plot(abs(fft(x)));
title('Matlab自带FFT函数计算结果');


figure;
plot(abs(y));
title('Matlab仿真结果');


figure;
plot([199,86,70,83,33,83,70,86]);
title('FPGA计算结果');
